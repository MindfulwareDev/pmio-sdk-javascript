/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine API that is designed to be used as a microservice to support enterprise cloud applications. The current Alpha 1.0 version supports most of the descriptive classes of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['Processmaker/ApiClient', 'Processmaker/Model/ErrorArray', 'Processmaker/Model/InputOutputCreateItem', 'Processmaker/Model/InputOutputItem', 'Processmaker/Model/ResultSuccess', 'Processmaker/Model/InputOutputCollection', 'Processmaker/Model/InputOutputUpdateItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/ErrorArray'), require('../Model/InputOutputCreateItem'), require('../Model/InputOutputItem'), require('../Model/ResultSuccess'), require('../Model/InputOutputCollection'), require('../Model/InputOutputUpdateItem'));
  } else {
    // Browser globals (root is window)
    if (!root.PMIO) {
      root.PMIO = {};
    }
    root.PMIO.Inputoutputs = factory(root.PMIO.ApiClient, root.PMIO.ErrorArray, root.PMIO.InputOutputCreateItem, root.PMIO.InputOutputItem, root.PMIO.ResultSuccess, root.PMIO.InputOutputCollection, root.PMIO.InputOutputUpdateItem);
  }
}(this, function(ApiClient, ErrorArray, InputOutputCreateItem, InputOutputItem, ResultSuccess, InputOutputCollection, InputOutputUpdateItem) {
  'use strict';

  /**
   * Inputoutputs service.
   * @module Processmaker/PMIO/Inputoutputs
   * @version 1.0.0
   */

  /**
   * Constructs a new Inputoutputs. 
   * @alias module:Processmaker/PMIO/Inputoutputs
   * @class
   * @param {module:Processmaker/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:Processmaker/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addInputOutput operation.
     * @callback module:Processmaker/PMIO/Inputoutputs~addInputOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/InputOutputItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new Input/Output object.
     * @param {String} processId Process ID related to Input/Output object
     * @param {String} taskId Task instance ID related to Input/Output object
     * @param {module:Processmaker/Model/InputOutputCreateItem} inputOutputCreateItem Create and add a new Input/Output object with JSON API
     * @param {module:Processmaker/PMIO/Inputoutputs~addInputOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/InputOutputItem}
     */
    this.addInputOutput = function(processId, taskId, inputOutputCreateItem, callback) {
      var postBody = inputOutputCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addInputOutput";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling addInputOutput";
      }

      // verify the required parameter 'inputOutputCreateItem' is set
      if (inputOutputCreateItem == undefined || inputOutputCreateItem == null) {
        throw "Missing the required parameter 'inputOutputCreateItem' when calling addInputOutput";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InputOutputItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/inputoutput', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInputOutput operation.
     * @callback module:Processmaker/PMIO/Inputoutputs~deleteInputOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes the Input/Output based on the Input/Output ID, process ID and task ID.
     * @param {String} processId Process ID related to the Input/Output object
     * @param {String} taskId Task instance ID related to Input/Output object
     * @param {String} inputoutputUid Input/Output ID to fetch
     * @param {module:Processmaker/PMIO/Inputoutputs~deleteInputOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ResultSuccess}
     */
    this.deleteInputOutput = function(processId, taskId, inputoutputUid, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling deleteInputOutput";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling deleteInputOutput";
      }

      // verify the required parameter 'inputoutputUid' is set
      if (inputoutputUid == undefined || inputoutputUid == null) {
        throw "Missing the required parameter 'inputoutputUid' when calling deleteInputOutput";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId,
        'inputoutput_uid': inputoutputUid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findInputOutputById operation.
     * @callback module:Processmaker/PMIO/Inputoutputs~findInputOutputByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/InputOutputItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves an Input/Output object using its ID.
     * @param {String} processId Process ID related to the Input/Output object
     * @param {String} taskId Task instance ID related to the Input/Output object
     * @param {String} inputoutputUid ID of Input/Output to return
     * @param {module:Processmaker/PMIO/Inputoutputs~findInputOutputByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/InputOutputItem}
     */
    this.findInputOutputById = function(processId, taskId, inputoutputUid, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findInputOutputById";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling findInputOutputById";
      }

      // verify the required parameter 'inputoutputUid' is set
      if (inputoutputUid == undefined || inputoutputUid == null) {
        throw "Missing the required parameter 'inputoutputUid' when calling findInputOutputById";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId,
        'inputoutput_uid': inputoutputUid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InputOutputItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listInputOutputs operation.
     * @callback module:Processmaker/PMIO/Inputoutputs~listInputOutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/InputOutputCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing Input/Output objects in the related task instance.
     * @param {String} processId Process ID related to Input/Output object
     * @param {String} taskId Task instance ID related to Input/Output object
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/Inputoutputs~listInputOutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/InputOutputCollection}
     */
    this.listInputOutputs = function(processId, taskId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling listInputOutputs";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling listInputOutputs";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InputOutputCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/inputoutput', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInputOutput operation.
     * @callback module:Processmaker/PMIO/Inputoutputs~updateInputOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/InputOutputItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing Input/Output object.
     * @param {String} processId Process ID related to the Input/Output object
     * @param {String} taskId Task instance ID related to the Input/Output object
     * @param {String} inputoutputUid ID of Input/Output to retrieve
     * @param {module:Processmaker/Model/InputOutputUpdateItem} inputOutputUpdateItem Input/Output object to edit
     * @param {module:Processmaker/PMIO/Inputoutputs~updateInputOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/InputOutputItem}
     */
    this.updateInputOutput = function(processId, taskId, inputoutputUid, inputOutputUpdateItem, callback) {
      var postBody = inputOutputUpdateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling updateInputOutput";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling updateInputOutput";
      }

      // verify the required parameter 'inputoutputUid' is set
      if (inputoutputUid == undefined || inputoutputUid == null) {
        throw "Missing the required parameter 'inputoutputUid' when calling updateInputOutput";
      }

      // verify the required parameter 'inputOutputUpdateItem' is set
      if (inputOutputUpdateItem == undefined || inputOutputUpdateItem == null) {
        throw "Missing the required parameter 'inputOutputUpdateItem' when calling updateInputOutput";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId,
        'inputoutput_uid': inputoutputUid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InputOutputItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/inputoutput/{inputoutput_uid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

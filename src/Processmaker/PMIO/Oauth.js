/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine API that is designed to be used as a microservice to support enterprise cloud applications. The current Alpha 1.0 version supports most of the descriptive classes of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['Processmaker/ApiClient', 'Processmaker/Model/ErrorArray', 'Processmaker/Model/OauthClientCreateItem', 'Processmaker/Model/OauthClientItem', 'Processmaker/Model/OauthClientCollection'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/ErrorArray'), require('../Model/OauthClientCreateItem'), require('../Model/OauthClientItem'), require('../Model/OauthClientCollection'));
  } else {
    // Browser globals (root is window)
    if (!root.PMIO) {
      root.PMIO = {};
    }
    root.PMIO.Oauth = factory(root.PMIO.ApiClient, root.PMIO.ErrorArray, root.PMIO.OauthClientCreateItem, root.PMIO.OauthClientItem, root.PMIO.OauthClientCollection);
  }
}(this, function(ApiClient, ErrorArray, OauthClientCreateItem, OauthClientItem, OauthClientCollection) {
  'use strict';

  /**
   * Oauth service.
   * @module Processmaker/PMIO/Oauth
   * @version 1.0.0
   */

  /**
   * Constructs a new Oauth. 
   * @alias module:Processmaker/PMIO/Oauth
   * @class
   * @param {module:Processmaker/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:Processmaker/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addOauthClient operation.
     * @callback module:Processmaker/PMIO/Oauth~addOauthClientCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/OauthClientItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new Oauth client for the user.
     * @param {String} userId ID of the user related to the Oauth client
     * @param {module:Processmaker/Model/OauthClientCreateItem} oauthClientCreateItem JSON API with the Oauth Client object to add
     * @param {module:Processmaker/PMIO/Oauth~addOauthClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/OauthClientItem}
     */
    this.addOauthClient = function(userId, oauthClientCreateItem, callback) {
      var postBody = oauthClientCreateItem;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling addOauthClient";
      }

      // verify the required parameter 'oauthClientCreateItem' is set
      if (oauthClientCreateItem == undefined || oauthClientCreateItem == null) {
        throw "Missing the required parameter 'oauthClientCreateItem' when calling addOauthClient";
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = OauthClientItem;

      return this.apiClient.callApi(
        '/users/{user_id}/clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findOauthClientById operation.
     * @callback module:Processmaker/PMIO/Oauth~findOauthClientByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/OauthClientItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves an Oauth client for the User based on its ID.  The response contains the &#x60;client_secret&#x60; required to obtain the &#x60;access_token&#x60;.
     * @param {String} userId ID of user to retrieve
     * @param {String} clientId ID of Oauth client to retrieve
     * @param {module:Processmaker/PMIO/Oauth~findOauthClientByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/OauthClientItem}
     */
    this.findOauthClientById = function(userId, clientId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling findOauthClientById";
      }

      // verify the required parameter 'clientId' is set
      if (clientId == undefined || clientId == null) {
        throw "Missing the required parameter 'clientId' when calling findOauthClientById";
      }


      var pathParams = {
        'user_id': userId,
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = OauthClientItem;

      return this.apiClient.callApi(
        '/users/{user_id}/clients/{client_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findOauthClients operation.
     * @callback module:Processmaker/PMIO/Oauth~findOauthClientsCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/OauthClientCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing Oauth clients belonging to a user.
     * @param {String} userId User ID related to the Oauth clients
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/Oauth~findOauthClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/OauthClientCollection}
     */
    this.findOauthClients = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw "Missing the required parameter 'userId' when calling findOauthClients";
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = OauthClientCollection;

      return this.apiClient.callApi(
        '/users/{user_id}/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

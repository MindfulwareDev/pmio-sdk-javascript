/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine API that is designed to be used as a microservice to support enterprise cloud applications. The current Alpha 1.0 version supports most of the descriptive classes of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['Processmaker/ApiClient', 'Processmaker/Model/ErrorArray', 'Processmaker/Model/ResultSuccess', 'Processmaker/Model/TaskAddGroupsItem', 'Processmaker/Model/TaskItem', 'Processmaker/Model/TaskCreateItem', 'Processmaker/Model/TaskConnectorCreateItem', 'Processmaker/Model/TaskConnector1', 'Processmaker/Model/TaskConnectorsCollection', 'Processmaker/Model/InlineResponse200', 'Processmaker/Model/TaskInstanceCollection', 'Processmaker/Model/TaskCollection', 'Processmaker/Model/TaskRemoveGroupsItem', 'Processmaker/Model/TaskSyncGroupsItem', 'Processmaker/Model/TaskUpdateItem', 'Processmaker/Model/TaskConnectorUpdateItem', 'Processmaker/Model/TaskInstanceUpdateItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/ErrorArray'), require('../Model/ResultSuccess'), require('../Model/TaskAddGroupsItem'), require('../Model/TaskItem'), require('../Model/TaskCreateItem'), require('../Model/TaskConnectorCreateItem'), require('../Model/TaskConnector1'), require('../Model/TaskConnectorsCollection'), require('../Model/InlineResponse200'), require('../Model/TaskInstanceCollection'), require('../Model/TaskCollection'), require('../Model/TaskRemoveGroupsItem'), require('../Model/TaskSyncGroupsItem'), require('../Model/TaskUpdateItem'), require('../Model/TaskConnectorUpdateItem'), require('../Model/TaskInstanceUpdateItem'));
  } else {
    // Browser globals (root is window)
    if (!root.PMIO) {
      root.PMIO = {};
    }
    root.PMIO.Task = factory(root.PMIO.ApiClient, root.PMIO.ErrorArray, root.PMIO.ResultSuccess, root.PMIO.TaskAddGroupsItem, root.PMIO.TaskItem, root.PMIO.TaskCreateItem, root.PMIO.TaskConnectorCreateItem, root.PMIO.TaskConnector1, root.PMIO.TaskConnectorsCollection, root.PMIO.InlineResponse200, root.PMIO.TaskInstanceCollection, root.PMIO.TaskCollection, root.PMIO.TaskRemoveGroupsItem, root.PMIO.TaskSyncGroupsItem, root.PMIO.TaskUpdateItem, root.PMIO.TaskConnectorUpdateItem, root.PMIO.TaskInstanceUpdateItem);
  }
}(this, function(ApiClient, ErrorArray, ResultSuccess, TaskAddGroupsItem, TaskItem, TaskCreateItem, TaskConnectorCreateItem, TaskConnector1, TaskConnectorsCollection, InlineResponse200, TaskInstanceCollection, TaskCollection, TaskRemoveGroupsItem, TaskSyncGroupsItem, TaskUpdateItem, TaskConnectorUpdateItem, TaskInstanceUpdateItem) {
  'use strict';

  /**
   * Task service.
   * @module Processmaker/PMIO/Task
   * @version 1.0.0
   */

  /**
   * Constructs a new Task. 
   * @alias module:Processmaker/PMIO/Task
   * @class
   * @param {module:Processmaker/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:Processmaker/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addGroupsToTask operation.
     * @callback module:Processmaker/PMIO/Task~addGroupsToTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method assigns group(s) to the chosen task
     * @param {String} processId Process ID
     * @param {String} taskId ID of the task to be modified
     * @param {module:Processmaker/Model/TaskAddGroupsItem} taskAddGroupsItem JSON API with Group IDs to add
     * @param {module:Processmaker/PMIO/Task~addGroupsToTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ResultSuccess}
     */
    this.addGroupsToTask = function(processId, taskId, taskAddGroupsItem, callback) {
      var postBody = taskAddGroupsItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addGroupsToTask";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling addGroupsToTask";
      }

      // verify the required parameter 'taskAddGroupsItem' is set
      if (taskAddGroupsItem == undefined || taskAddGroupsItem == null) {
        throw "Missing the required parameter 'taskAddGroupsItem' when calling addGroupsToTask";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/groups', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addTask operation.
     * @callback module:Processmaker/PMIO/Task~addTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/TaskItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new task.
     * @param {String} processId Process ID related to the task
     * @param {module:Processmaker/Model/TaskCreateItem} taskCreateItem JSON API with the task object to add
     * @param {module:Processmaker/PMIO/Task~addTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/TaskItem}
     */
    this.addTask = function(processId, taskCreateItem, callback) {
      var postBody = taskCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addTask";
      }

      // verify the required parameter 'taskCreateItem' is set
      if (taskCreateItem == undefined || taskCreateItem == null) {
        throw "Missing the required parameter 'taskCreateItem' when calling addTask";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addTaskConnector operation.
     * @callback module:Processmaker/PMIO/Task~addTaskConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/TaskConnector1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is for creating a new task connector
     * @param {String} processId ID of the process to fetch
     * @param {String} taskId ID of the task to fetch
     * @param {module:Processmaker/Model/TaskConnectorCreateItem} taskConnectorCreateItem JSON API with the TaskConnector object to add
     * @param {module:Processmaker/PMIO/Task~addTaskConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/TaskConnector1}
     */
    this.addTaskConnector = function(processId, taskId, taskConnectorCreateItem, callback) {
      var postBody = taskConnectorCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addTaskConnector";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling addTaskConnector";
      }

      // verify the required parameter 'taskConnectorCreateItem' is set
      if (taskConnectorCreateItem == undefined || taskConnectorCreateItem == null) {
        throw "Missing the required parameter 'taskConnectorCreateItem' when calling addTaskConnector";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskConnector1;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/connectors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTask operation.
     * @callback module:Processmaker/PMIO/Task~deleteTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes a task using the task ID and the process ID.
     * @param {String} processId Process ID
     * @param {String} taskId ID of a task to delete
     * @param {module:Processmaker/PMIO/Task~deleteTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ResultSuccess}
     */
    this.deleteTask = function(processId, taskId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling deleteTask";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling deleteTask";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTaskConnector operation.
     * @callback module:Processmaker/PMIO/Task~deleteTaskConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is for deleting a single task connector based on task ID, the process ID and the Connector ID.
     * @param {String} processId ID of the process item to fetch
     * @param {String} taskId ID of the task item to fetch
     * @param {String} connectorId ID of TaskConnector to fetch
     * @param {module:Processmaker/PMIO/Task~deleteTaskConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ResultSuccess}
     */
    this.deleteTaskConnector = function(processId, taskId, connectorId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling deleteTaskConnector";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling deleteTaskConnector";
      }

      // verify the required parameter 'connectorId' is set
      if (connectorId == undefined || connectorId == null) {
        throw "Missing the required parameter 'connectorId' when calling deleteTaskConnector";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId,
        'connector_id': connectorId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTaskById operation.
     * @callback module:Processmaker/PMIO/Task~findTaskByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/TaskItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves a task using its ID.
     * @param {String} processId ID of the process to return
     * @param {String} taskId ID of the task to return
     * @param {module:Processmaker/PMIO/Task~findTaskByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/TaskItem}
     */
    this.findTaskById = function(processId, taskId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findTaskById";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling findTaskById";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTaskConnectorById operation.
     * @callback module:Processmaker/PMIO/Task~findTaskConnectorByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/TaskConnector1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is for retrieving a task connector based on its ID.
     * @param {String} processId ID of the process to fetch
     * @param {String} taskId ID of the task to fetch
     * @param {String} connectorId ID of TaskConnector to fetch
     * @param {module:Processmaker/PMIO/Task~findTaskConnectorByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/TaskConnector1}
     */
    this.findTaskConnectorById = function(processId, taskId, connectorId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findTaskConnectorById";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling findTaskConnectorById";
      }

      // verify the required parameter 'connectorId' is set
      if (connectorId == undefined || connectorId == null) {
        throw "Missing the required parameter 'connectorId' when calling findTaskConnectorById";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId,
        'connector_id': connectorId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskConnector1;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTaskConnectors operation.
     * @callback module:Processmaker/PMIO/Task~findTaskConnectorsCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/TaskConnectorsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns all task connectors related to the run process and task.
     * @param {String} processId ID of the process to fetch
     * @param {String} taskId ID of the task to fetch
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/Task~findTaskConnectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/TaskConnectorsCollection}
     */
    this.findTaskConnectors = function(processId, taskId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findTaskConnectors";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling findTaskConnectors";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskConnectorsCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/connectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTaskInstanceById operation.
     * @callback module:Processmaker/PMIO/Task~findTaskInstanceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves a task instance based on its ID.
     * @param {String} taskInstanceId ID of task instance to return
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/Task~findTaskInstanceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/InlineResponse200}
     */
    this.findTaskInstanceById = function(taskInstanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'taskInstanceId' is set
      if (taskInstanceId == undefined || taskInstanceId == null) {
        throw "Missing the required parameter 'taskInstanceId' when calling findTaskInstanceById";
      }


      var pathParams = {
        'task_instance_id': taskInstanceId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/task_instances/{task_instance_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTaskInstances operation.
     * @callback module:Processmaker/PMIO/Task~findTaskInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/TaskInstanceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing task instances.
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/Task~findTaskInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/TaskInstanceCollection}
     */
    this.findTaskInstances = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskInstanceCollection;

      return this.apiClient.callApi(
        '/task_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTasks operation.
     * @callback module:Processmaker/PMIO/Task~findTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/TaskCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is intended for returning a list of all tasks related to the process.
     * @param {String} processId ID of the process relative to the task
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/Task~findTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/TaskCollection}
     */
    this.findTasks = function(processId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findTasks";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGroupsFromTask operation.
     * @callback module:Processmaker/PMIO/Task~removeGroupsFromTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method removes groups from a task.
     * @param {String} processId Process ID
     * @param {String} taskId Task ID
     * @param {module:Processmaker/Model/TaskRemoveGroupsItem} taskRemoveGroupsItem JSON API response with Group IDs to remove
     * @param {module:Processmaker/PMIO/Task~removeGroupsFromTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ResultSuccess}
     */
    this.removeGroupsFromTask = function(processId, taskId, taskRemoveGroupsItem, callback) {
      var postBody = taskRemoveGroupsItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling removeGroupsFromTask";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling removeGroupsFromTask";
      }

      // verify the required parameter 'taskRemoveGroupsItem' is set
      if (taskRemoveGroupsItem == undefined || taskRemoveGroupsItem == null) {
        throw "Missing the required parameter 'taskRemoveGroupsItem' when calling removeGroupsFromTask";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/groups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the syncGroupsToTask operation.
     * @callback module:Processmaker/PMIO/Task~syncGroupsToTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method synchronizes one or more groups with a task.
     * @param {String} processId Process ID
     * @param {String} taskId ID of the task to modify
     * @param {module:Processmaker/Model/TaskSyncGroupsItem} taskSyncGroupsItem JSON API response with group IDs to sync
     * @param {module:Processmaker/PMIO/Task~syncGroupsToTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ResultSuccess}
     */
    this.syncGroupsToTask = function(processId, taskId, taskSyncGroupsItem, callback) {
      var postBody = taskSyncGroupsItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling syncGroupsToTask";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling syncGroupsToTask";
      }

      // verify the required parameter 'taskSyncGroupsItem' is set
      if (taskSyncGroupsItem == undefined || taskSyncGroupsItem == null) {
        throw "Missing the required parameter 'taskSyncGroupsItem' when calling syncGroupsToTask";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTask operation.
     * @callback module:Processmaker/PMIO/Task~updateTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/TaskItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is for updating an existing task.
     * @param {String} processId ID of the process to fetch
     * @param {String} taskId ID of the task to fetch
     * @param {module:Processmaker/Model/TaskUpdateItem} taskUpdateItem Task object to edit
     * @param {module:Processmaker/PMIO/Task~updateTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/TaskItem}
     */
    this.updateTask = function(processId, taskId, taskUpdateItem, callback) {
      var postBody = taskUpdateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling updateTask";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling updateTask";
      }

      // verify the required parameter 'taskUpdateItem' is set
      if (taskUpdateItem == undefined || taskUpdateItem == null) {
        throw "Missing the required parameter 'taskUpdateItem' when calling updateTask";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskConnector operation.
     * @callback module:Processmaker/PMIO/Task~updateTaskConnectorCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/TaskConnector1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates the existing task connector with new parameter values.
     * @param {String} processId ID of the process to fetch
     * @param {String} taskId ID of the task to fetch
     * @param {String} connectorId ID of the task connector to fetch
     * @param {module:Processmaker/Model/TaskConnectorUpdateItem} taskConnectorUpdateItem TaskConnector object to edit
     * @param {module:Processmaker/PMIO/Task~updateTaskConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/TaskConnector1}
     */
    this.updateTaskConnector = function(processId, taskId, connectorId, taskConnectorUpdateItem, callback) {
      var postBody = taskConnectorUpdateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling updateTaskConnector";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling updateTaskConnector";
      }

      // verify the required parameter 'connectorId' is set
      if (connectorId == undefined || connectorId == null) {
        throw "Missing the required parameter 'connectorId' when calling updateTaskConnector";
      }

      // verify the required parameter 'taskConnectorUpdateItem' is set
      if (taskConnectorUpdateItem == undefined || taskConnectorUpdateItem == null) {
        throw "Missing the required parameter 'taskConnectorUpdateItem' when calling updateTaskConnector";
      }


      var pathParams = {
        'process_id': processId,
        'task_id': taskId,
        'connector_id': connectorId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskConnector1;

      return this.apiClient.callApi(
        '/processes/{process_id}/tasks/{task_id}/connectors/{connector_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaskInstance operation.
     * @callback module:Processmaker/PMIO/Task~updateTaskInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing task instance.
     * @param {String} taskInstanceId ID of the task instance to retrieve
     * @param {module:Processmaker/Model/TaskInstanceUpdateItem} taskInstanceUpdateItem Task instance object to update
     * @param {module:Processmaker/PMIO/Task~updateTaskInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/InlineResponse200}
     */
    this.updateTaskInstance = function(taskInstanceId, taskInstanceUpdateItem, callback) {
      var postBody = taskInstanceUpdateItem;

      // verify the required parameter 'taskInstanceId' is set
      if (taskInstanceId == undefined || taskInstanceId == null) {
        throw "Missing the required parameter 'taskInstanceId' when calling updateTaskInstance";
      }

      // verify the required parameter 'taskInstanceUpdateItem' is set
      if (taskInstanceUpdateItem == undefined || taskInstanceUpdateItem == null) {
        throw "Missing the required parameter 'taskInstanceUpdateItem' when calling updateTaskInstance";
      }


      var pathParams = {
        'task_instance_id': taskInstanceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/task_instances/{task_instance_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

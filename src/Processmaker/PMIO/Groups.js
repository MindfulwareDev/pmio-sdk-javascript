/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine API that is designed to be used as a microservice to support enterprise cloud applications. The current Alpha 1.0 version supports most of the descriptive classes of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['Processmaker/ApiClient', 'Processmaker/Model/ErrorArray', 'Processmaker/Model/GroupCreateItem', 'Processmaker/Model/GroupItem', 'Processmaker/Model/GroupAddUsersItem', 'Processmaker/Model/ResultSuccess', 'Processmaker/Model/GroupCollection', 'Processmaker/Model/GroupRemoveUsersItem', 'Processmaker/Model/GroupSyncUsersItem', 'Processmaker/Model/GroupUpdateItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/ErrorArray'), require('../Model/GroupCreateItem'), require('../Model/GroupItem'), require('../Model/GroupAddUsersItem'), require('../Model/ResultSuccess'), require('../Model/GroupCollection'), require('../Model/GroupRemoveUsersItem'), require('../Model/GroupSyncUsersItem'), require('../Model/GroupUpdateItem'));
  } else {
    // Browser globals (root is window)
    if (!root.PMIO) {
      root.PMIO = {};
    }
    root.PMIO.Groups = factory(root.PMIO.ApiClient, root.PMIO.ErrorArray, root.PMIO.GroupCreateItem, root.PMIO.GroupItem, root.PMIO.GroupAddUsersItem, root.PMIO.ResultSuccess, root.PMIO.GroupCollection, root.PMIO.GroupRemoveUsersItem, root.PMIO.GroupSyncUsersItem, root.PMIO.GroupUpdateItem);
  }
}(this, function(ApiClient, ErrorArray, GroupCreateItem, GroupItem, GroupAddUsersItem, ResultSuccess, GroupCollection, GroupRemoveUsersItem, GroupSyncUsersItem, GroupUpdateItem) {
  'use strict';

  /**
   * Groups service.
   * @module Processmaker/PMIO/Groups
   * @version 1.0.0
   */

  /**
   * Constructs a new Groups. 
   * @alias module:Processmaker/PMIO/Groups
   * @class
   * @param {module:Processmaker/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:Processmaker/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addGroup operation.
     * @callback module:Processmaker/PMIO/Groups~addGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/GroupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new group.
     * @param {module:Processmaker/Model/GroupCreateItem} groupCreateItem JSON API with the Group object to add
     * @param {module:Processmaker/PMIO/Groups~addGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/GroupItem}
     */
    this.addGroup = function(groupCreateItem, callback) {
      var postBody = groupCreateItem;

      // verify the required parameter 'groupCreateItem' is set
      if (groupCreateItem == undefined || groupCreateItem == null) {
        throw "Missing the required parameter 'groupCreateItem' when calling addGroup";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = GroupItem;

      return this.apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addUsersToGroup operation.
     * @callback module:Processmaker/PMIO/Groups~addUsersToGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method adds one or more new users to a group.
     * @param {String} id ID of group to be modified
     * @param {module:Processmaker/Model/GroupAddUsersItem} groupAddUsersItem JSON API response with array of user IDs
     * @param {module:Processmaker/PMIO/Groups~addUsersToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ResultSuccess}
     */
    this.addUsersToGroup = function(id, groupAddUsersItem, callback) {
      var postBody = groupAddUsersItem;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling addUsersToGroup";
      }

      // verify the required parameter 'groupAddUsersItem' is set
      if (groupAddUsersItem == undefined || groupAddUsersItem == null) {
        throw "Missing the required parameter 'groupAddUsersItem' when calling addUsersToGroup";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/groups/{id}/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroup operation.
     * @callback module:Processmaker/PMIO/Groups~deleteGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes a group using the group ID.
     * @param {String} id ID of group to delete
     * @param {module:Processmaker/PMIO/Groups~deleteGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ResultSuccess}
     */
    this.deleteGroup = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteGroup";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findGroupById operation.
     * @callback module:Processmaker/PMIO/Groups~findGroupByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/GroupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves a group using its ID.
     * @param {String} id ID of group to return
     * @param {module:Processmaker/PMIO/Groups~findGroupByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/GroupItem}
     */
    this.findGroupById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling findGroupById";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = GroupItem;

      return this.apiClient.callApi(
        '/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findGroups operation.
     * @callback module:Processmaker/PMIO/Groups~findGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/GroupCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing groups.
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/Groups~findGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/GroupCollection}
     */
    this.findGroups = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = GroupCollection;

      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUsersFromGroup operation.
     * @callback module:Processmaker/PMIO/Groups~removeUsersFromGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method removes one or more users from a group.
     * @param {String} id ID of group to be modified
     * @param {module:Processmaker/Model/GroupRemoveUsersItem} groupRemoveUsersItem JSON API response with Users IDs to remove
     * @param {module:Processmaker/PMIO/Groups~removeUsersFromGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ResultSuccess}
     */
    this.removeUsersFromGroup = function(id, groupRemoveUsersItem, callback) {
      var postBody = groupRemoveUsersItem;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling removeUsersFromGroup";
      }

      // verify the required parameter 'groupRemoveUsersItem' is set
      if (groupRemoveUsersItem == undefined || groupRemoveUsersItem == null) {
        throw "Missing the required parameter 'groupRemoveUsersItem' when calling removeUsersFromGroup";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/groups/{id}/users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the syncUsersToGroup operation.
     * @callback module:Processmaker/PMIO/Groups~syncUsersToGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method synchronizes one or more users with a group.
     * @param {String} id ID of group to be modified
     * @param {module:Processmaker/Model/GroupSyncUsersItem} groupSyncUsersItem JSON API with array of users IDs to sync
     * @param {module:Processmaker/PMIO/Groups~syncUsersToGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ResultSuccess}
     */
    this.syncUsersToGroup = function(id, groupSyncUsersItem, callback) {
      var postBody = groupSyncUsersItem;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling syncUsersToGroup";
      }

      // verify the required parameter 'groupSyncUsersItem' is set
      if (groupSyncUsersItem == undefined || groupSyncUsersItem == null) {
        throw "Missing the required parameter 'groupSyncUsersItem' when calling syncUsersToGroup";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/groups/{id}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroup operation.
     * @callback module:Processmaker/PMIO/Groups~updateGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/GroupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing group.
     * @param {String} id ID of group to retrieve
     * @param {module:Processmaker/Model/GroupUpdateItem} groupUpdateItem Group object to edit
     * @param {module:Processmaker/PMIO/Groups~updateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/GroupItem}
     */
    this.updateGroup = function(id, groupUpdateItem, callback) {
      var postBody = groupUpdateItem;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateGroup";
      }

      // verify the required parameter 'groupUpdateItem' is set
      if (groupUpdateItem == undefined || groupUpdateItem == null) {
        throw "Missing the required parameter 'groupUpdateItem' when calling updateGroup";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = GroupItem;

      return this.apiClient.callApi(
        '/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine API that is designed to be used as a microservice to support enterprise cloud applications. The current Alpha 1.0 version supports most of the descriptive classes of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['Processmaker/ApiClient', 'Processmaker/Model/ErrorArray', 'Processmaker/Model/FlowCreateItem', 'Processmaker/Model/FlowItem', 'Processmaker/Model/ResultSuccess', 'Processmaker/Model/FlowCollection', 'Processmaker/Model/FlowUpdateItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/ErrorArray'), require('../Model/FlowCreateItem'), require('../Model/FlowItem'), require('../Model/ResultSuccess'), require('../Model/FlowCollection'), require('../Model/FlowUpdateItem'));
  } else {
    // Browser globals (root is window)
    if (!root.PMIO) {
      root.PMIO = {};
    }
    root.PMIO.Flows = factory(root.PMIO.ApiClient, root.PMIO.ErrorArray, root.PMIO.FlowCreateItem, root.PMIO.FlowItem, root.PMIO.ResultSuccess, root.PMIO.FlowCollection, root.PMIO.FlowUpdateItem);
  }
}(this, function(ApiClient, ErrorArray, FlowCreateItem, FlowItem, ResultSuccess, FlowCollection, FlowUpdateItem) {
  'use strict';

  /**
   * Flows service.
   * @module Processmaker/PMIO/Flows
   * @version 1.0.0
   */

  /**
   * Constructs a new Flows. 
   * @alias module:Processmaker/PMIO/Flows
   * @class
   * @param {module:Processmaker/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:Processmaker/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addFlow operation.
     * @callback module:Processmaker/PMIO/Flows~addFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/FlowItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new Sequence Flow.
     * @param {String} processId ID of the process related to the flow
     * @param {module:Processmaker/Model/FlowCreateItem} flowCreateItem JSON API response with the Flow object to add
     * @param {module:Processmaker/PMIO/Flows~addFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/FlowItem}
     */
    this.addFlow = function(processId, flowCreateItem, callback) {
      var postBody = flowCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addFlow";
      }

      // verify the required parameter 'flowCreateItem' is set
      if (flowCreateItem == undefined || flowCreateItem == null) {
        throw "Missing the required parameter 'flowCreateItem' when calling addFlow";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = FlowItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/flows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFlow operation.
     * @callback module:Processmaker/PMIO/Flows~deleteFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes the Sequence Flow using the flow ID and the process ID.
     * @param {String} processId Process ID
     * @param {String} flowId ID of the flow to delete
     * @param {module:Processmaker/PMIO/Flows~deleteFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ResultSuccess}
     */
    this.deleteFlow = function(processId, flowId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling deleteFlow";
      }

      // verify the required parameter 'flowId' is set
      if (flowId == undefined || flowId == null) {
        throw "Missing the required parameter 'flowId' when calling deleteFlow";
      }


      var pathParams = {
        'process_id': processId,
        'flow_id': flowId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/flows/{flow_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findFlowById operation.
     * @callback module:Processmaker/PMIO/Flows~findFlowByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/FlowItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves a flow based on its ID.
     * @param {String} processId ID of the process to return
     * @param {String} flowId ID of the flow to return
     * @param {module:Processmaker/PMIO/Flows~findFlowByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/FlowItem}
     */
    this.findFlowById = function(processId, flowId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findFlowById";
      }

      // verify the required parameter 'flowId' is set
      if (flowId == undefined || flowId == null) {
        throw "Missing the required parameter 'flowId' when calling findFlowById";
      }


      var pathParams = {
        'process_id': processId,
        'flow_id': flowId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = FlowItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/flows/{flow_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFlows operation.
     * @callback module:Processmaker/PMIO/Flows~listFlowsCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/FlowCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing flows.
     * @param {String} processId ID of the process related to the flow
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/Flows~listFlowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/FlowCollection}
     */
    this.listFlows = function(processId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling listFlows";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = FlowCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/flows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFlow operation.
     * @callback module:Processmaker/PMIO/Flows~updateFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/FlowItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates an existing flow.
     * @param {String} processId ID of the process to retrieve
     * @param {String} flowId ID of the flow to retrieve
     * @param {module:Processmaker/Model/FlowUpdateItem} flowUpdateItem Flow object to edit
     * @param {module:Processmaker/PMIO/Flows~updateFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/FlowItem}
     */
    this.updateFlow = function(processId, flowId, flowUpdateItem, callback) {
      var postBody = flowUpdateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling updateFlow";
      }

      // verify the required parameter 'flowId' is set
      if (flowId == undefined || flowId == null) {
        throw "Missing the required parameter 'flowId' when calling updateFlow";
      }

      // verify the required parameter 'flowUpdateItem' is set
      if (flowUpdateItem == undefined || flowUpdateItem == null) {
        throw "Missing the required parameter 'flowUpdateItem' when calling updateFlow";
      }


      var pathParams = {
        'process_id': processId,
        'flow_id': flowId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = FlowItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/flows/{flow_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

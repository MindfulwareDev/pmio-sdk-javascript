/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine API that is designed to be used as a microservice to support enterprise cloud applications. The current Alpha 1.0 version supports most of the descriptive classes of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['Processmaker/ApiClient', 'Processmaker/Model/ErrorArray', 'Processmaker/Model/InstanceCreateItem', 'Processmaker/Model/InstanceItem', 'Processmaker/Model/ResultSuccess', 'Processmaker/Model/DataModelCollection', 'Processmaker/Model/DataModelItem1', 'Processmaker/Model/InstanceCollection', 'Processmaker/Model/TaskInstanceCollection', 'Processmaker/Model/TokenCollection', 'Processmaker/Model/InstanceUpdateItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/ErrorArray'), require('../Model/InstanceCreateItem'), require('../Model/InstanceItem'), require('../Model/ResultSuccess'), require('../Model/DataModelCollection'), require('../Model/DataModelItem1'), require('../Model/InstanceCollection'), require('../Model/TaskInstanceCollection'), require('../Model/TokenCollection'), require('../Model/InstanceUpdateItem'));
  } else {
    // Browser globals (root is window)
    if (!root.PMIO) {
      root.PMIO = {};
    }
    root.PMIO.ProcessInstance = factory(root.PMIO.ApiClient, root.PMIO.ErrorArray, root.PMIO.InstanceCreateItem, root.PMIO.InstanceItem, root.PMIO.ResultSuccess, root.PMIO.DataModelCollection, root.PMIO.DataModelItem1, root.PMIO.InstanceCollection, root.PMIO.TaskInstanceCollection, root.PMIO.TokenCollection, root.PMIO.InstanceUpdateItem);
  }
}(this, function(ApiClient, ErrorArray, InstanceCreateItem, InstanceItem, ResultSuccess, DataModelCollection, DataModelItem1, InstanceCollection, TaskInstanceCollection, TokenCollection, InstanceUpdateItem) {
  'use strict';

  /**
   * ProcessInstance service.
   * @module Processmaker/PMIO/ProcessInstance
   * @version 1.0.0
   */

  /**
   * Constructs a new ProcessInstance. 
   * @alias module:Processmaker/PMIO/ProcessInstance
   * @class
   * @param {module:Processmaker/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:Processmaker/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addInstance operation.
     * @callback module:Processmaker/PMIO/ProcessInstance~addInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/InstanceItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a new instance.
     * @param {String} processId Process ID related to the instance
     * @param {module:Processmaker/Model/InstanceCreateItem} instanceCreateItem JSON API response with the instance object to add
     * @param {module:Processmaker/PMIO/ProcessInstance~addInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/InstanceItem}
     */
    this.addInstance = function(processId, instanceCreateItem, callback) {
      var postBody = instanceCreateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling addInstance";
      }

      // verify the required parameter 'instanceCreateItem' is set
      if (instanceCreateItem == undefined || instanceCreateItem == null) {
        throw "Missing the required parameter 'instanceCreateItem' when calling addInstance";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InstanceItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInstance operation.
     * @callback module:Processmaker/PMIO/ProcessInstance~deleteInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ResultSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes an instance using the instance ID and the process ID.
     * @param {String} processId Process ID
     * @param {String} instanceId ID of the instance to delete
     * @param {module:Processmaker/PMIO/ProcessInstance~deleteInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ResultSuccess}
     */
    this.deleteInstance = function(processId, instanceId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling deleteInstance";
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw "Missing the required parameter 'instanceId' when calling deleteInstance";
      }


      var pathParams = {
        'process_id': processId,
        'instance_id': instanceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ResultSuccess;

      return this.apiClient.callApi(
        '/processes/{process_id}/instances/{instance_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findByFieldInsideDataModel operation.
     * @callback module:Processmaker/PMIO/ProcessInstance~findByFieldInsideDataModelCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/DataModelCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the data model by field passed in get argument.
     * @param {String} processId ID of the process to return
     * @param {String} searchParam Key and value of searched field in DataModel
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/ProcessInstance~findByFieldInsideDataModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/DataModelCollection}
     */
    this.findByFieldInsideDataModel = function(processId, searchParam, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findByFieldInsideDataModel";
      }

      // verify the required parameter 'searchParam' is set
      if (searchParam == undefined || searchParam == null) {
        throw "Missing the required parameter 'searchParam' when calling findByFieldInsideDataModel";
      }


      var pathParams = {
        'process_id': processId,
        'search_param': searchParam
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = DataModelCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/datamodels/search/{search_param}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findDataModel operation.
     * @callback module:Processmaker/PMIO/ProcessInstance~findDataModelCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/DataModelItem1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method returns the instance data model and lets the user work with it directly.
     * @param {String} processId ID of the process to return
     * @param {String} instanceId ID of the instance to return
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/ProcessInstance~findDataModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/DataModelItem1}
     */
    this.findDataModel = function(processId, instanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findDataModel";
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw "Missing the required parameter 'instanceId' when calling findDataModel";
      }


      var pathParams = {
        'process_id': processId,
        'instance_id': instanceId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = DataModelItem1;

      return this.apiClient.callApi(
        '/processes/{process_id}/instances/{instance_id}/datamodel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findInstanceById operation.
     * @callback module:Processmaker/PMIO/ProcessInstance~findInstanceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/InstanceItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves an instance using its ID.
     * @param {String} processId ID of the process to return
     * @param {String} instanceId ID of the instance to return
     * @param {module:Processmaker/PMIO/ProcessInstance~findInstanceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/InstanceItem}
     */
    this.findInstanceById = function(processId, instanceId, callback) {
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findInstanceById";
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw "Missing the required parameter 'instanceId' when calling findInstanceById";
      }


      var pathParams = {
        'process_id': processId,
        'instance_id': instanceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InstanceItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/instances/{instance_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findInstances operation.
     * @callback module:Processmaker/PMIO/ProcessInstance~findInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/InstanceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves instances related to the process using the process ID
     * @param {String} processId Process ID related to the instances
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/ProcessInstance~findInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/InstanceCollection}
     */
    this.findInstances = function(processId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findInstances";
      }


      var pathParams = {
        'process_id': processId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InstanceCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTaskInstancesByInstanceAndTaskId operation.
     * @callback module:Processmaker/PMIO/ProcessInstance~findTaskInstancesByInstanceAndTaskIdCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/TaskInstanceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves task instances using the instance ID and the task ID.
     * @param {String} instanceId ID of the instance
     * @param {String} taskId ID of the task
     * @param {module:Processmaker/PMIO/ProcessInstance~findTaskInstancesByInstanceAndTaskIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/TaskInstanceCollection}
     */
    this.findTaskInstancesByInstanceAndTaskId = function(instanceId, taskId, callback) {
      var postBody = null;

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw "Missing the required parameter 'instanceId' when calling findTaskInstancesByInstanceAndTaskId";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling findTaskInstancesByInstanceAndTaskId";
      }


      var pathParams = {
        'instance_id': instanceId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskInstanceCollection;

      return this.apiClient.callApi(
        '/instances/{instance_id}/tasks/{task_id}/task_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTaskInstancesByInstanceAndTaskIdDelegated operation.
     * @callback module:Processmaker/PMIO/ProcessInstance~findTaskInstancesByInstanceAndTaskIdDelegatedCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/TaskInstanceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves delegated task instances using the instance ID and the task ID.
     * @param {String} instanceId ID of the instance
     * @param {String} taskId ID of the task
     * @param {module:Processmaker/PMIO/ProcessInstance~findTaskInstancesByInstanceAndTaskIdDelegatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/TaskInstanceCollection}
     */
    this.findTaskInstancesByInstanceAndTaskIdDelegated = function(instanceId, taskId, callback) {
      var postBody = null;

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw "Missing the required parameter 'instanceId' when calling findTaskInstancesByInstanceAndTaskIdDelegated";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling findTaskInstancesByInstanceAndTaskIdDelegated";
      }


      var pathParams = {
        'instance_id': instanceId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskInstanceCollection;

      return this.apiClient.callApi(
        '/instances/{instance_id}/tasks/{task_id}/task_instances/delegated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTaskInstancesByInstanceAndTaskIdStarted operation.
     * @callback module:Processmaker/PMIO/ProcessInstance~findTaskInstancesByInstanceAndTaskIdStartedCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/TaskInstanceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves started task instances using the instance ID and the task ID.
     * @param {String} instanceId ID of the instance
     * @param {String} taskId ID of the task
     * @param {module:Processmaker/PMIO/ProcessInstance~findTaskInstancesByInstanceAndTaskIdStartedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/TaskInstanceCollection}
     */
    this.findTaskInstancesByInstanceAndTaskIdStarted = function(instanceId, taskId, callback) {
      var postBody = null;

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw "Missing the required parameter 'instanceId' when calling findTaskInstancesByInstanceAndTaskIdStarted";
      }

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling findTaskInstancesByInstanceAndTaskIdStarted";
      }


      var pathParams = {
        'instance_id': instanceId,
        'task_id': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TaskInstanceCollection;

      return this.apiClient.callApi(
        '/instances/{instance_id}/tasks/{task_id}/task_instances/started', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findTokens operation.
     * @callback module:Processmaker/PMIO/ProcessInstance~findTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/TokenCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves tokens related to the process and instance using the process and instance IDs
     * @param {String} processId Process ID
     * @param {String} instanceId Instance ID related to the process
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/ProcessInstance~findTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/TokenCollection}
     */
    this.findTokens = function(processId, instanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling findTokens";
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw "Missing the required parameter 'instanceId' when calling findTokens";
      }


      var pathParams = {
        'process_id': processId,
        'instance_id': instanceId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = TokenCollection;

      return this.apiClient.callApi(
        '/processes/{process_id}/instances/{instance_id}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstance operation.
     * @callback module:Processmaker/PMIO/ProcessInstance~updateInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/InstanceItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method updates  an existing instance.
     * @param {String} processId ID of the process to retrieve
     * @param {String} instanceId ID of the instance to retrieve
     * @param {module:Processmaker/Model/InstanceUpdateItem} instanceUpdateItem Instance object to edit
     * @param {module:Processmaker/PMIO/ProcessInstance~updateInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/InstanceItem}
     */
    this.updateInstance = function(processId, instanceId, instanceUpdateItem, callback) {
      var postBody = instanceUpdateItem;

      // verify the required parameter 'processId' is set
      if (processId == undefined || processId == null) {
        throw "Missing the required parameter 'processId' when calling updateInstance";
      }

      // verify the required parameter 'instanceId' is set
      if (instanceId == undefined || instanceId == null) {
        throw "Missing the required parameter 'instanceId' when calling updateInstance";
      }

      // verify the required parameter 'instanceUpdateItem' is set
      if (instanceUpdateItem == undefined || instanceUpdateItem == null) {
        throw "Missing the required parameter 'instanceUpdateItem' when calling updateInstance";
      }


      var pathParams = {
        'process_id': processId,
        'instance_id': instanceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InstanceItem;

      return this.apiClient.callApi(
        '/processes/{process_id}/instances/{instance_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine API that is designed to be used as a microservice to support enterprise cloud applications. The current Alpha 1.0 version supports most of the descriptive classes of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['Processmaker/ApiClient', 'Processmaker/Model/ErrorArray', 'Processmaker/Model/ListAggregatedLogCollection', 'Processmaker/Model/ListLogCollection', 'Processmaker/Model/InlineResponse200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/ErrorArray'), require('../Model/ListAggregatedLogCollection'), require('../Model/ListLogCollection'), require('../Model/InlineResponse200'));
  } else {
    // Browser globals (root is window)
    if (!root.PMIO) {
      root.PMIO = {};
    }
    root.PMIO.Logs = factory(root.PMIO.ApiClient, root.PMIO.ErrorArray, root.PMIO.ListAggregatedLogCollection, root.PMIO.ListLogCollection, root.PMIO.InlineResponse200);
  }
}(this, function(ApiClient, ErrorArray, ListAggregatedLogCollection, ListLogCollection, InlineResponse200) {
  'use strict';

  /**
   * Logs service.
   * @module Processmaker/PMIO/Logs
   * @version 1.0.0
   */

  /**
   * Constructs a new Logs. 
   * @alias module:Processmaker/PMIO/Logs
   * @class
   * @param {module:Processmaker/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:Processmaker/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the listAggregatedLogs operation.
     * @callback module:Processmaker/PMIO/Logs~listAggregatedLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ListAggregatedLogCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing aggregated logs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.action The string to filter by action. (default to processToken)
     * @param {module:Processmaker/Model/String} opts.interval The string to filter by period, accepted values: day|hour|month (default to day)
     * @param {String} opts.processId The string to filter by the process ID.
     * @param {String} opts.dateFrom Start date for retrieved list.
     * @param {String} opts.dateTo End date for retrieved list.
     * @param {module:Processmaker/PMIO/Logs~listAggregatedLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ListAggregatedLogCollection}
     */
    this.listAggregatedLogs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'action': opts['action'],
        'interval': opts['interval'],
        'process_id': opts['processId'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ListAggregatedLogCollection;

      return this.apiClient.callApi(
        '/logs/aggregated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listLogs operation.
     * @callback module:Processmaker/PMIO/Logs~listLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/ListLogCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing logs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.search The string to search in logs.
     * @param {String} opts.order The order of retrieved list.
     * @param {String} opts.processId Filter by the process ID.
     * @param {String} opts.dateFrom Start date for retrieved list.
     * @param {String} opts.dateTo End date for retrieved list.
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/Logs~listLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/ListLogCollection}
     */
    this.listLogs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
        'order': opts['order'],
        'process_id': opts['processId'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ListLogCollection;

      return this.apiClient.callApi(
        '/logs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logSummary operation.
     * @callback module:Processmaker/PMIO/Logs~logSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:Processmaker/Model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method retrieves all existing logs by action and period.
     * @param {Object} opts Optional parameters
     * @param {String} opts.action The action to search in logs.
     * @param {String} opts.processId Filter by the process ID.
     * @param {String} opts.dateFrom Start date for retrieved list.
     * @param {String} opts.dateTo End date for retrieved list.
     * @param {Integer} opts.page Page number to fetch (default to 1)
     * @param {Integer} opts.perPage Amount of items per page (default to 15)
     * @param {module:Processmaker/PMIO/Logs~logSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:Processmaker/Model/InlineResponse200}
     */
    this.logSummary = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'action': opts['action'],
        'process_id': opts['processId'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['PasswordGrant'];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/logs/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

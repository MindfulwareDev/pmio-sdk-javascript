/**
 * ProcessMaker API
 * This ProcessMaker I/O API provides access to a BPMN 2.0 compliant workflow engine API that is designed to be used as a microservice to support enterprise cloud applications. The current Alpha 1.0 version supports most of the descriptive classes of the BPMN 2.0 specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@processmaker.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PMIO);
  }
}(this, function(expect, PMIO) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PMIO.Task();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Task', function() {
    describe('addGroupsToTask', function() {
      it('should call addGroupsToTask successfully', function(done) {
        //uncomment below and update the code to test addGroupsToTask
        //instance.addGroupsToTask(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTask', function() {
      it('should call addTask successfully', function(done) {
        //uncomment below and update the code to test addTask
        //instance.addTask(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTaskConnector', function() {
      it('should call addTaskConnector successfully', function(done) {
        //uncomment below and update the code to test addTaskConnector
        //instance.addTaskConnector(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTask', function() {
      it('should call deleteTask successfully', function(done) {
        //uncomment below and update the code to test deleteTask
        //instance.deleteTask(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTaskConnector', function() {
      it('should call deleteTaskConnector successfully', function(done) {
        //uncomment below and update the code to test deleteTaskConnector
        //instance.deleteTaskConnector(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findTaskById', function() {
      it('should call findTaskById successfully', function(done) {
        //uncomment below and update the code to test findTaskById
        //instance.findTaskById(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findTaskConnectorById', function() {
      it('should call findTaskConnectorById successfully', function(done) {
        //uncomment below and update the code to test findTaskConnectorById
        //instance.findTaskConnectorById(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findTaskConnectors', function() {
      it('should call findTaskConnectors successfully', function(done) {
        //uncomment below and update the code to test findTaskConnectors
        //instance.findTaskConnectors(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findTaskInstanceById', function() {
      it('should call findTaskInstanceById successfully', function(done) {
        //uncomment below and update the code to test findTaskInstanceById
        //instance.findTaskInstanceById(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findTaskInstances', function() {
      it('should call findTaskInstances successfully', function(done) {
        //uncomment below and update the code to test findTaskInstances
        //instance.findTaskInstances(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findTasks', function() {
      it('should call findTasks successfully', function(done) {
        //uncomment below and update the code to test findTasks
        //instance.findTasks(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeGroupsFromTask', function() {
      it('should call removeGroupsFromTask successfully', function(done) {
        //uncomment below and update the code to test removeGroupsFromTask
        //instance.removeGroupsFromTask(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('syncGroupsToTask', function() {
      it('should call syncGroupsToTask successfully', function(done) {
        //uncomment below and update the code to test syncGroupsToTask
        //instance.syncGroupsToTask(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTask', function() {
      it('should call updateTask successfully', function(done) {
        //uncomment below and update the code to test updateTask
        //instance.updateTask(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTaskConnector', function() {
      it('should call updateTaskConnector successfully', function(done) {
        //uncomment below and update the code to test updateTaskConnector
        //instance.updateTaskConnector(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTaskInstance', function() {
      it('should call updateTaskInstance successfully', function(done) {
        //uncomment below and update the code to test updateTaskInstance
        //instance.updateTaskInstance(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
